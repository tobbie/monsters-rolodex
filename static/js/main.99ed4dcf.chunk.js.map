{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAACC,GACjB,OACG,sBAAKC,UAAU,iBAAf,UACK,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCJjBC,EAAW,SAACR,GACrB,OACE,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCNrBM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAEpC,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASC,YAAaH,EACrDI,SAAUH,MCmCHI,E,kDApCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXT,SAAW,GACXU,YAAY,IAJH,E,gEASO,IAAD,OACjBC,MAAM,6CACNC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,+BAGjC,IAAD,SAC0BE,KAAKR,MAA9BT,EADD,EACCA,SAAUU,EADX,EACWA,YACXQ,EACAlB,EAASmB,QAAO,SAAAxB,GAAO,OAAIA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAGjF,OACE,sBAAK5B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACrBC,aAAgB,SAACkB,GAAD,OAAO,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAG/D,cAAC,EAAD,CAAUxB,SAAYkB,W,GA7BbO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.99ed4dcf.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) =>{\n    return(\n       <div className='card-container'>\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n       </div>\n       \n    )\n\n}","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n    return (\n      <div className='card-list'>\n        {\n            props.monsters.map(monster => (\n               <Card key={monster.id} monster = {monster} />\n                        ))                \n        }\n      </div>\n    );\n}","import React from 'react'\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeHolder, handleChange}) => {\n\n    return(\n        <input className='search' type='search' placeholder={placeHolder} \n        onChange={handleChange} />\n    )\n}","import React, {Component} from 'react'\nimport './App.css';\nimport  {CardList} from './components/card-list/card-list.component'\nimport {SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField:''\n           \n    }\n  }\n\n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users')\n   .then( response => response.json())\n   .then( users => this.setState({monsters: users}) )\n  }\n   \n  render(){\n    const {monsters, searchField} = this.state\n    const filteredMonsters = \n          monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n                                                     \n                                                      \n    return (\n      <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBox placeHolder='search monsters'\n            handleChange = {(e) => this.setState({searchField: e.target.value})}\n          />\n\n         <CardList monsters = {filteredMonsters} />\n      </div>\n    \n    ); \n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}